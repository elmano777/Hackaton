org: rolandodiaz
service: utec-diagram-backend

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    zip: true
    slim: true
    strip: false
    # Remover las dependencias que queremos incluir
    noDeps: []  # Cambiado: permitir todas las dependencias
    invalidateCaches: true
    # Configuraciones adicionales para diagrams
    pipCmdExtraArgs:
      - "--no-cache-dir"
    pythonBin: python3
    # Usar layer para dependencias pesadas
    layer:
      name: ${self:service}-${self:provider.stage}-python-requirements
      description: Python requirements layer
      compatibleRuntimes:
        - python3.12
      retain: false

provider:
  name: aws
  runtime: python3.12
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    STAGE: ${self:provider.stage}
    S3_BUCKET: utec-diagrams-${self:provider.stage}
    USERS_TABLE: utec-users-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
    CORS_ORIGIN: ${env:CORS_ORIGIN, '*'}
  iam:
    role: arn:aws:iam::409362080365:role/LabRole
  # Referenciar el layer autom치ticamente
  layers:
    - {Ref: PythonRequirementsLambdaLayer}

functions:
  # Autenticaci칩n
  login:
    handler: auth.login
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  signup:
    handler: auth.signup
    events:
      - http:
          path: auth/signup
          method: post
          cors: true

  # Obtener perfil de usuario
  getProfile:
    handler: auth.get_profile
    events:
      - http:
          path: auth/profile
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  # Actualizar perfil de usuario
  updateProfile:
    handler: auth.update_profile
    events:
      - http:
          path: auth/profile
          method: put
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  # Generaci칩n de diagramas - Configuraci칩n especial
  generateDiagram:
    handler: diagrams_handler.generate
    timeout: 30
    memorySize: 1024
    environment:
      # Variables adicionales para graphviz
      PATH: "/opt/bin:/usr/local/bin:/usr/bin/:/bin:/opt/nodejs/bin"
      LD_LIBRARY_PATH: "/opt/lib"
    events:
      - http:
          path: diagrams/generate
          method: post
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  # Obtener diagramas del usuario
  getUserDiagrams:
    handler: diagrams_handler.get_user_diagrams
    events:
      - http:
          path: diagrams/user
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  # Authorizer personalizado
  authorizerFunc:
    handler: auth.authorizer

resources:
  Resources:
    DiagramsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: utec-diagrams-${self:provider.stage}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
              MaxAge: 3000

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: utec-users-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true